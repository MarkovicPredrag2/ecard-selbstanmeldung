-- MySQL Script generated by MySQL Workbench
-- Mon Jan 29 12:49:11 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
set global sql_mode='';
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema ordination
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ordination
-- -----------------------------------------------------
DROP DATABASE IF EXISTS `ordination`;
CREATE SCHEMA IF NOT EXISTS `ordination` DEFAULT CHARACTER SET utf8 ;
USE `ordination` ;

-- -----------------------------------------------------
-- Table `ordination`.`p_patient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`p_patient` (
  `p_svnr` INT(10) NOT NULL,
  `p_titel` VARCHAR(45),
  `p_gender` VARCHAR(45) NOT NULL,
  `p_nachname` VARCHAR(45) NOT NULL,
  `p_vorname` VARCHAR(45) NOT NULL,
  `p_gebdat` VARCHAR(45) NOT NULL,
  `p_hausnummer` VARCHAR(3) NULL,
  `p_ort` VARCHAR(45) NULL,
  `p_plz` VARCHAR(45) NULL,
  `p_postfachnummer` VARCHAR(45) NULL,
  `p_postfachtext` VARCHAR(45) NULL,
  `p_staatcode` VARCHAR(45) NULL,
  `p_stocktuernummer` VARCHAR(45) NULL,
  `p_strasse` VARCHAR(45) NULL,
  PRIMARY KEY (`p_svnr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`v_versicherung`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`v_versicherung` (
  `v_versicherungsartencode` VARCHAR(45) NOT NULL,
  `v_anspruchsart` VARCHAR(45) NULL,
  `v_svtcode` VARCHAR(45) NULL,
  `v_kostenteilbefreit` TINYINT NULL,
  `v_rezeptbefreit` TINYINT NULL,
  PRIMARY KEY (`v_versicherungsartencode`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`p_patient_has_v_versicherung`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`p_patient_has_v_versicherung` (
  `p_patient_p_svnr` INT NOT NULL,
  `v_versicherung_v_versicherungsartencode` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`p_patient_p_svnr`, `v_versicherung_v_versicherungsartencode`),
  INDEX `fk_p_patient_has_v_versicherung_v_versicherung1_idx` (`v_versicherung_v_versicherungsartencode` ASC),
  INDEX `fk_p_patient_has_v_versicherung_p_patient_idx` (`p_patient_p_svnr` ASC),
  CONSTRAINT `fk_p_patient_has_v_versicherung_p_patient`
    FOREIGN KEY (`p_patient_p_svnr`)
    REFERENCES `ordination`.`p_patient` (`p_svnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_p_patient_has_v_versicherung_v_versicherung1`
    FOREIGN KEY (`v_versicherung_v_versicherungsartencode`)
    REFERENCES `ordination`.`v_versicherung` (`v_versicherungsartencode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`r_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`r_role` (
  `r_bezeichnung` VARCHAR(45) NOT NULL,
  `r_beschreibung` VARCHAR(255) NULL,
  PRIMARY KEY (`r_bezeichnung`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`b_benutzer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`b_benutzer` (
  `b_username` VARCHAR(45) NOT NULL,
  `b_passwort` VARCHAR(100) NOT NULL,
  `b_beschreibung` VARCHAR(255) NULL,
  `b_salt` CHAR(12) NOT NULL,
  `b_r_role` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`b_username`),
  INDEX `fk_b_benutzer_r_role1_idx` (`b_r_role` ASC),
  CONSTRAINT `fk_b_benutzer_r_role1`
    FOREIGN KEY (`b_r_role`)
    REFERENCES `ordination`.`r_role` (`r_bezeichnung`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`r_raum`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`r_raum` (
  `r_raumname` VARCHAR(45) NOT NULL,
  `r_platz` INT NULL,
  PRIMARY KEY (`r_raumname`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`beh_behandlung`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`beh_behandlung` (
  `beh_id` INT NOT NULL AUTO_INCREMENT,
  `beh_b_arzt` VARCHAR(45) NOT NULL,
  `beh_r_raum` VARCHAR(45) NOT NULL,
  `beh_w_patient` INT(10) NOT NULL,
  PRIMARY KEY (`beh_id`),
  INDEX `fk_beh_behandlung_b_benutzer1_idx` (`beh_b_arzt` ASC),
  INDEX `fk_beh_behandlung_r_raum1_idx` (`beh_r_raum` ASC),
  INDEX `fk_beh_behandlung_w_warteliste1_idx` (`beh_w_patient` ASC),
  CONSTRAINT `fk_beh_behandlung_b_benutzer1`
    FOREIGN KEY (`beh_b_arzt`)
    REFERENCES `ordination`.`b_benutzer` (`b_username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_beh_behandlung_r_raum1`
    FOREIGN KEY (`beh_r_raum`)
    REFERENCES `ordination`.`r_raum` (`r_raumname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_beh_behandlung_w_warteliste1`
    FOREIGN KEY (`beh_w_patient`)
    REFERENCES `ordination`.`w_warteliste` (`w_patient_p_svnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`g_grund`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`g_grund` (
  `g_id` INT NOT NULL AUTO_INCREMENT,
  `g_bezeichnung` VARCHAR(45) NULL,
  PRIMARY KEY (`g_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`w_warteliste`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`w_warteliste` (
  `w_patient_p_svnr` INT(10) NOT NULL,
  `w_rank` INT NULL,
  `w_enter_timestamp` INT(11) NULL,
  `w_beh_session` INT,
  `w_g_grund` INT NOT NULL,
  INDEX `fk_w_warteliste_p_patient1_idx` (`w_patient_p_svnr` ASC),
  PRIMARY KEY (`w_patient_p_svnr`),
  INDEX `fk_w_warteliste_beh_behandlung1_idx` (`w_beh_session` ASC),
  CONSTRAINT `fk_w_warteliste_p_patient1`
    FOREIGN KEY (`w_patient_p_svnr`)
    REFERENCES `ordination`.`p_patient` (`p_svnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_w_warteliste_beh_behandlung1`
    FOREIGN KEY (`w_beh_session`)
    REFERENCES `ordination`.`beh_behandlung` (`beh_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_w_warteliste_g_grund1`
    FOREIGN KEY (`w_g_grund`)
    REFERENCES `ordination`.`g_grund` (`g_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`la_logart`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`la_logart` (
  `l_id` INT NOT NULL,
  `l_bezeichnung` VARCHAR(45) NULL,
  PRIMARY KEY (`l_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ordination`.`l_log`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ordination`.`l_log` (
  `l_id` INT NOT NULL AUTO_INCREMENT,
  `l_timestamp` DATETIME NULL,
  `l_la_art` INT,
  `l_daten` VARCHAR(1000) NULL,
  PRIMARY KEY (`l_id`),
  INDEX `fk_l_log_la_logart1_idx` (`l_la_art` ASC),
  CONSTRAINT `fk_l_log_la_logart1`
    FOREIGN KEY (`l_la_art`)
    REFERENCES `ordination`.`la_logart` (`l_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Trigger NeuerPatient
-- -----------------------------------------------------
USE `ordination`;
DELIMITER $$
USE `ordination`$$
DROP TRIGGER IF EXISTS  `ordination`.`p_patient_AFTER_INSERT`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ordination`.`p_patient_AFTER_INSERT` AFTER INSERT ON `p_patient` FOR EACH ROW
BEGIN
	SET @svnr= (SELECT LAST_INSERT_ID());
    SET @oldSVNR = (SELECT LAST_INSERT_ID());
    SET @vorname= (SELECT p_vorname FROM p_patient WHERE p_svnr = @svnr);
    SET @name= (SELECT p_nachname FROM p_patient WHERE p_svnr = @svnr);
	SET @json = "{";
    SET @json = CONCAT(@json, "\"svnr\"", ":", "\"", @svnr, "\"," ,"\"nachname\"", ":", "\"", @name, "\"," ,"\"vorname\"", ":", "\"", @vorname, "\"" );
    SET @json = CONCAT(@json, "}");
    INSERT INTO l_log (`l_timestamp`, `l_la_art`, `l_daten`) VALUES (now(), 1, @json);
END$$


-- -----------------------------------------------------
-- Trigger Patientendaten√§nderung
-- -----------------------------------------------------
USE `ordination`$$
DROP TRIGGER IF EXISTS  `ordination`.`p_patient_AFTER_UPDATE`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ordination`.`p_patient_AFTER_UPDATE` AFTER UPDATE ON `p_patient` FOR EACH ROW
BEGIN
	SET @svnr= (SELECT LAST_INSERT_ID());
    SET @vorname= (SELECT p_vorname FROM p_patient WHERE p_svnr = @svnr);
    SET @oldVorname = (SELECT p_vorname FROM p_patient WHERE p_svnr = @oldSVNR);
	SET @json = "{";
    SET @json = CONCAT(@json, "\"svnr\"", ":", "\"", @svnr, "\"," /*, "\"nachname\"", ":", "\"", @name, "\"," ,"\"vorname\"", ":", "\"", @vorname, "\";"*/);
    SET @json = CONCAT(@json, "\"aenderungen\":[{");
    SET @json = CONCAT(@json, "\"old\"", ":", "\"", @oldVorname, "\"" , ",",  "\"new\"", ":", "\"", @vorname, "\"");
    SET @json = CONCAT(@json, "}]");
    SET @json = CONCAT(@json, "}");
    INSERT INTO l_log (`l_timestamp`, `l_la_art`, `l_daten`) VALUES (now(), 2, @json);
END$$


-- -----------------------------------------------------
-- Trigger Patient-Einschreibung
-- -----------------------------------------------------
USE `ordination`$$
DROP TRIGGER IF EXISTS  `ordination`.`w_warteliste_AFTER_INSERT`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ordination`.`w_warteliste_AFTER_INSERT` AFTER INSERT ON `w_warteliste` FOR EACH ROW
BEGIN
	SET @svnr= (SELECT LAST_INSERT_ID());
    SET @vorname= (SELECT p_vorname FROM p_patient WHERE p_svnr = @svnr);
    SET @name= (SELECT p_nachname FROM p_patient WHERE p_svnr = @svnr);
    SET @grundID= (SELECT w_g_grund FROM w_warteliste WHERE w_patient_p_svnr = @svnr);
    SET @grund= (SELECT g_bezeichnung FROM g_grund WHERE g_id = @grundID);
	SET @json = "{";
    SET @json = CONCAT(@json, "\"svnr\"", ":", "\"", @svnr, "\"," ,"\"nachname\"", ":", "\"", @name, "\"," ,"\"vorname\"", ":", "\"", @vorname, "\"," ,"\"grund\"", ":", "\"", @grund, "\"" );
    SET @json = CONCAT(@json, "}");
    INSERT INTO l_log (`l_timestamp`, `l_la_art`, `l_daten`) VALUES (now(), 3, @json);
END$$


-- -----------------------------------------------------
-- Wartelisteaufruf
-- -----------------------------------------------------
USE `ordination`$$
DROP TRIGGER IF EXISTS  `ordination`.`w_warteliste_AFTER_UPDATE`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ordination`.`w_warteliste_AFTER_UPDATE` AFTER UPDATE ON `w_warteliste` FOR EACH ROW
BEGIN
	SET @svnr= (SELECT LAST_INSERT_ID());
    SET @name= (SELECT p_nachname FROM p_patient WHERE p_svnr = @svnr);
    SET @vorname= (SELECT p_vorname FROM p_patient WHERE p_svnr = @svnr);
    SET @arzt= (SELECT beh_b_arzt FROM beh_behandlung WHERE beh_w_patient = @svnr);
	SET @raum= (SELECT beh_r_raum FROM beh_behandlung WHERE beh_w_patient = @svnr);
	SET @json = "{";
    SET @json = CONCAT(@json, "\"svnr\"", ":", "\"", @svnr, "\"," ,"\"nachname\"", ":", "\"", @name, "\"," ,"\"vorname\"", ":", "\"", @vorname, "\"," ,"\"arzt\"", ":", "\"", @arzt, "\"," ,"\"raum\"", ":", "\"", @raum, "\"");
    SET @json = CONCAT(@json, "}");
    INSERT INTO l_log (`l_timestamp`, `l_la_art`, `l_daten`) VALUES (now(), 4, @json);
END$$


-- -----------------------------------------------------
-- Webapplikation Anmeldung
-- -----------------------------------------------------
/*USE `ordination`$$
DROP TRIGGER IF EXISTS  `ordination`.`w_warteliste_AFTER_INSE`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ordination`.`w_warteliste_AFTER_INSE` BEFORE INSERT ON `w_warteliste` FOR EACH ROW
BEGIN
	SET @json = "{";
    SET @json = CONCAT(@json, "\"zeit\"", ":", "\"", now(), "\"");
    SET @json = CONCAT(@json, "}");
    INSERT INTO l_log (`l_timestamp`, `l_la_art`, `l_daten`) VALUES (now(), 5, @json);
END$$*/


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Data for table `ordination`.`r_role`
-- -----------------------------------------------------
START TRANSACTION;
USE `ordination`;
INSERT INTO `ordination`.`r_role` (`r_bezeichnung`, `r_beschreibung`) VALUES ('arzt', 'User um die Webapplikation zu benutzen');
INSERT INTO `ordination`.`r_role` (`r_bezeichnung`, `r_beschreibung`) VALUES ('ipadapp', 'iPads f√ºr die Anmeldung');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ordination`.`g_grund`
-- -----------------------------------------------------
START TRANSACTION;
USE `ordination`;
INSERT INTO `ordination`.`g_grund` (`g_id`, `g_bezeichnung`) VALUES (1, 'Rezept');
INSERT INTO `ordination`.`g_grund` (`g_id`, `g_bezeichnung`) VALUES (2, 'Behandlung');
INSERT INTO `ordination`.`g_grund` (`g_id`, `g_bezeichnung`) VALUES (3, 'Arbeitsunf√§higkeitsmeldung');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ordination`.`la_logart`
-- -----------------------------------------------------
START TRANSACTION;
USE `ordination`;
INSERT INTO `ordination`.`la_logart` (`l_id`, `l_bezeichnung`) VALUES (1, 'Neuer Patient');
INSERT INTO `ordination`.`la_logart` (`l_id`, `l_bezeichnung`) VALUES (2, 'Patientendaten√§nderung');
INSERT INTO `ordination`.`la_logart` (`l_id`, `l_bezeichnung`) VALUES (3, 'Patient-Einschreibung');
INSERT INTO `ordination`.`la_logart` (`l_id`, `l_bezeichnung`) VALUES (4, 'Wartelisteaufruf');
INSERT INTO `ordination`.`la_logart` (`l_id`, `l_bezeichnung`) VALUES (5, 'Webapplikation Anmeldung');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ordination`.`r_raum`
-- -----------------------------------------------------
START TRANSACTION;
USE `ordination`;
INSERT INTO `ordination`.`r_raum` (`r_raumname`, `r_platz`) VALUES ('Ordination1', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ordination`.`b_benutzer`
-- -----------------------------------------------------
START TRANSACTION;
USE `ordination`;
INSERT INTO `ordination`.`b_benutzer` (`b_username`, `b_passwort`, `b_salt`, `b_r_role`) VALUES ('drmuncan', '1234', '123456789012','arzt');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ordination`.`p_patient`
-- -----------------------------------------------------

START TRANSACTION;
USE `ordination`;
INSERT INTO `ordination`.`p_patient` (`p_svnr`, `p_titel`, `p_gender`, `p_nachname`, `p_vorname`, `p_gebdat`, `p_hausnummer`, `p_ort`, `p_plz`, `p_postfachnummer`, `p_postfachtext`, `p_staatcode`, `p_stocktuernummer`, `p_strasse`) VALUES (LAST_INSERT_ID(1234567894), 'Dr.', 'M', 'Mustermann', 'Max', '1.1.2000', '23', 'Wien', '1050', '1', NULL, 'AT', '1/2', 'Hauptstra√üe');
INSERT INTO `ordination`.`p_patient` (`p_svnr`, `p_titel`,`p_gender`, `p_nachname`, `p_vorname`, `p_gebdat`, `p_hausnummer`, `p_ort`, `p_plz`, `p_postfachnummer`, `p_postfachtext`, `p_staatcode`, `p_stocktuernummer`, `p_strasse`) VALUES (LAST_INSERT_ID(1234567896),' M', 'Bsc.', 'Muncan', 'Max', '1.1.2000', '23', 'Wien', '1050', '1', NULL, 'AT', '1/2', 'Hauptstra√üe');
INSERT INTO `ordination`.`p_patient` (`p_svnr`, `p_titel`,`p_gender`, `p_nachname`, `p_vorname`, `p_gebdat`, `p_hausnummer`, `p_ort`, `p_plz`, `p_postfachnummer`, `p_postfachtext`, `p_staatcode`, `p_stocktuernummer`, `p_strasse`) VALUES (LAST_INSERT_ID(1234567895), 'Mag.', 'M', 'Seifert', 'Max', '1.1.2000', '23', 'Wien', '1050', '1', NULL, 'AT', '1/2', 'Hauptstra√üe');

COMMIT;

-- -----------------------------------------------------
-- Sonstiges
-- -----------------------------------------------------

INSERT INTO `ordination`.`w_warteliste` (`w_patient_p_svnr`, `w_rank`, `w_enter_timestamp`, `w_g_grund`) VALUES (LAST_INSERT_ID(1234567895), 1234, 1244, 1);
INSERT INTO `ordination`.`beh_behandlung` (`beh_b_arzt`, `beh_r_raum`, `beh_w_patient`) VALUES ('drmuncan', 'Ordination1', LAST_INSERT_ID(1234567895));


UPDATE `ordination`.`p_patient` SET `p_vorname` =  'Predrag', `p_svnr` = LAST_INSERT_ID(1234567894) WHERE  `p_svnr` = '1234567894';
UPDATE `ordination`.`w_warteliste` SET `w_beh_session` = 1, `w_patient_p_svnr` = LAST_INSERT_ID(1234567895) WHERE  `w_patient_p_svnr` = '1234567895';

/*!50003 DROP FUNCTION IF EXISTS `hashPW` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `hashPW`(password TEXT, salt TEXT, count INT) RETURNS text CHARSET latin1
BEGIN
DECLARE hash TEXT;
SET hash = CONCAT(salt ,'.' , password);
iteration: LOOP
  IF count > 0 THEN
  SET hash = SHA2(hash, 224);
SET count = count - 1;
ELSE
LEAVE iteration;
END IF;
END LOOP;
RETURN hash;
END ;;
DELIMITER ;

#SELECT * from p_patient;
#SELECT * from w_warteliste;
#SELECT * from beh_behandlung;
SELECT * FROM l_log;
#select hashPW('dada', 'dadad', 1000);
